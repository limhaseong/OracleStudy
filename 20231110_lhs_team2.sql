--■■■ 과목 테이블 생성 ■■■--
CREATE TABLE SUBJECTS
( SUB_CODE VARCHAR2(20) 
, SUB_NAME VARCHAR2(30)  CONSTRAINT SUB_NAME_NN NOT NULL
, CONSTRAINT SUBJECTS_SUB_CODE_PK PRIMARY KEY(SUB_CODE)
);


--■■■ 강의실 테이블 생성 ■■■--
CREATE TABLE CLASSROOMS
( ROOM_CODE         VARCHAR2(20)
, ROOM_NAME         VARCHAR2(20)  CONSTRAINT CLASSROOMS_NAME_NN NOT NULL
, ROOM_EXPLANATION  VARCHAR2(100)
, CONSTRAINT CLASSROOMS_CODE_PK PRIMARY KEY(ROOM_CODE)
);


--■■■ 과정 테이블 생성 ■■■--
CREATE TABLE COURSES
( CRS_CODE  VARCHAR2(20)    
, CRS_NAME  VARCHAR2(100)    CONSTRAINT CRS_NAME_NN NOT NULL
, CONSTRAINT COURSES_CRS_CODE_PK PRIMARY KEY(CRS_CODE)
);


--■■■ 교재 테이블 생성 ■■■--
CREATE TABLE BOOKS
( BK_CODE           VARCHAR2(20)
, BK_NAME           VARCHAR2(100)    CONSTRAINT BOOKS_BK_NAME_NN NOT NULL
, BK_PRICE          NUMBER(6)        CONSTRAINT BOOKS_BK_PRICE_NN NOT NULL
, BK_EXPLANATION    VARCHAR2(100)
, CONSTRAINT BOOKS_BK_CODE_PK PRIMARY KEY(BK_CODE)
);


--■■■ 중도탈락사유 테이블 생성 ■■■--
CREATE TABLE DROP_REASONS
( DO_REASON_CODE           VARCHAR2(20)
, DO_REASON                VARCHAR2(50)     CONSTRAINT REASONS_DO_REASON_NN NOT NULL
, CONSTRAINT REASON_DO_REASON_CODE_PK PRIMARY KEY(DO_REASON_CODE)
);


--■■■ 교수 테이블 생성 ■■■--
CREATE TABLE PROFESSORS
( PF_CODE   VARCHAR2(20)    
, PF_ID     VARCHAR2(20)    CONSTRAINT PF_ID_NN NOT NULL
, PF_PW     VARCHAR2(20)    CONSTRAINT PF_PW_NN NOT NULL
, PF_NAME   VARCHAR2(20)    CONSTRAINT PF_NAME_NN NOT NULL
, PF_SSN    VARCHAR(14)     CONSTRAINT PF_SSN_NN NOT NULL
, PF_DATE   DATE            DEFAULT SYSDATE
, CONSTRAINT PROFESSORS_PF_CODE_PK PRIMARY KEY(PF_CODE)
, CONSTRAINT PROFESSORS_PF_ID_UK UNIQUE(PF_ID)
, CONSTRAINT PROFESSORS_PF_PW_UK CHECK (LENGTH(PF_PW) >= 7 AND LENGTH(PF_PW) <= 20)
);


--■■■ 관리자 테이블 생성 ■■■--
CREATE TABLE ADMINS
( AD_CODE   VARCHAR2(20)    
, AD_ID     VARCHAR2(20)    CONSTRAINT AD_ID_NN NOT NULL
, AD_PW     VARCHAR2(20)    CONSTRAINT AD_PW_NN NOT NULL
, AD_DATE   DATE            DEFAULT SYSDATE
, CONSTRAINT ADMINS_AD_CODE_PK PRIMARY KEY(AD_CODE)
, CONSTRAINT ADMINS_AD_ID_UK   UNIQUE(AD_ID)
, CONSTRAINT ADMINS_AD_PW_UK CHECK (LENGTH(AD_PW) >= 7 AND LENGTH(AD_PW) <= 20) 
);


--■■■ 학생 테이블 생성 ■■■--
CREATE TABLE STUDENTS
( ST_CODE  VARCHAR2(20)
, ST_ID    VARCHAR2(20) CONSTRAINT ST_ID_NN NOT NULL
, ST_PW    VARCHAR2(20) CONSTRAINT ST_PW_NN NOT NULL
, ST_NAME  VARCHAR2(20) CONSTRAINT ST_NAME_NN NOT NULL
, ST_SSN   VARCHAR(14)  CONSTRAINT ST_SSN_NN NOT NULL
, ST_DATE  DATE         DEFAULT SYSDATE
, CONSTRAINT STUDENTS_ST_CODE_PK PRIMARY KEY(ST_CODE)
, CONSTRAINT STUDENTS_ST_ID_UK  UNIQUE(ST_ID)
, CONSTRAINT STUDENTS_ST_PW_CK CHECK (LENGTH(ST_PW) >= 7 AND LENGTH(ST_PW) <= 20)
);


--■■■ 개설과정 테이블생성 ■■■--
CREATE TABLE OPEN_COURSES
( OCRS_CODE         VARCHAR2(20)
, CRS_CODE          VARCHAR2(20)
, PF_CODE             VARCHAR2(20)
, ROOM_CODE         VARCHAR2(20)
, START_DATE        DATE    CONSTRAINT COURSES_START_DATE_NN NOT NULL
, END_DATE          DATE    CONSTRAINT COURSES_END_DATE_NN NOT NULL
, CONSTRAINT OCRS_OCRS_CODE_PK PRIMARY KEY(OCRS_CODE)
, CONSTRAINT OCRS_CRS_CODE_FK FOREIGN KEY(CRS_CODE) REFERENCES COURSES(CRS_CODE)
, CONSTRAINT OCRS_PF_ID_FK FOREIGN KEY(PF_CODE) REFERENCES PROFESSORS(PF_CODE)
, CONSTRAINT OCRS_ROOM_CODE_FK FOREIGN KEY(ROOM_CODE) REFERENCES CLASSROOMS(ROOM_CODE)
);


--■■■ 수강신청 테이블생성 ■■■--
CREATE TABLE COURSE_REGISTRATIONS
( REG_CODE          VARCHAR2(20)
, ST_CODE           VARCHAR2(20)
, OCRS_CODE         VARCHAR2(20)
, REG_DATE          DATE        DEFAULT SYSDATE
, CONSTRAINT COURSE_REG_REG_CODE_PK PRIMARY KEY(REG_CODE)

, CONSTRAINT COURSE_REG_ST_CODE_FK  FOREIGN KEY(ST_CODE)
        REFERENCES STUDENTS(ST_CODE)
        
, CONSTRAINT COURSE_REG_OCRS_CODE_FK  FOREIGN KEY(OCRS_CODE)
        REFERENCES OPEN_COURSES(OCRS_CODE)
);


--■■■ 중도탈락 테이블생성 ■■■--
CREATE TABLE DROP_OUT_LISTS
( DO_CODE           VARCHAR2(20)   
, REG_CODE          VARCHAR2(20) 
, DO_REASON_CODE    VARCHAR2(20) 
, DO_DATE           DATE DEFAULT SYSDATE
, CONSTRAINT DO_LISTS_DO_CODE_PK PRIMARY KEY(DO_CODE)
, CONSTRAINT DO_LISTS_REG_CODE_FK FOREIGN KEY(REG_CODE)
                REFERENCES COURSE_REGISTRATIONS(REG_CODE)
, CONSTRAINT DO_LISTS_DO_REASON_CODE_FK FOREIGN KEY(DO_REASON_CODE)
                REFERENCES DROP_REASONS(DO_REASON_CODE)
);


--■■■ 개설과목 테이블생성 ■■■--
CREATE TABLE OPEN_SUBJECTS
( OSUB_CODE             VARCHAR(20)
, OCRS_CODE             VARCHAR(20)
, SUB_CODE              VARCHAR(20) 
, BK_CODE               VARCHAR(20)
, SUB_START_DATE        DATE        CONSTRAINT OPEN_SUBJECTS_SSD_NN NOT NULL
, SUB_END_DATE          DATE        CONSTRAINT OPEN_SUBJECTS_SED_NN NOT NULL
, ATTENDANCE_SCORE      NUMBER(3)   CONSTRAINT OPEN_SUBJECTS_AS_NN NOT NULL
, WRITTEN_SCORE         NUMBER(3)   CONSTRAINT OPEN_SUBJECTS_WS_NN NOT NULL
, PRACTICAL_SCORE       NUMBER(3)   CONSTRAINT OPEN_SUBJECTS_PS_NN NOT NULL
, CONSTRAINT OPEN_SUBJECTS_OSUB_CODE_PK PRIMARY KEY(OSUB_CODE)
, CONSTRAINT ATTENDANCE_SCORE CHECK(ATTENDANCE_SCORE BETWEEN 0 AND 100)
, CONSTRAINT WRITTEN_SCORE CHECK(WRITTEN_SCORE BETWEEN 0 AND 100)
, CONSTRAINT PRACTICAL_SCORE CHECK(PRACTICAL_SCORE BETWEEN 0 AND 100)
, CONSTRAINT OCRS_CODE_FK FOREIGN KEY(OCRS_CODE) REFERENCES OPEN_COURSES(OCRS_CODE)
, CONSTRAINT SUB_CODE_FK FOREIGN KEY(SUB_CODE) REFERENCES SUBJECTS(SUB_CODE)
, CONSTRAINT BK_CODE_FK FOREIGN KEY(BK_CODE) REFERENCES BOOKS(BK_CODE)
);


--■■■ 성적 테이블 생성 ■■■--
CREATE TABLE SCORES
( SCORE_CODE            VARCHAR2(20)
, REG_CODE              VARCHAR2(20)
, OSUB_CODE             VARCHAR2(20)
, ATTENDANCE_SCORE      NUMBER(3)   CONSTRAINT ATTENDANCE_SCORE_NN NOT NULL
, WRITTEN_SCORE         NUMBER(3)   CONSTRAINT WRITTEN_SCORE_NN NOT NULL
, PRACTICAL_SCORE       NUMBER(3)   CONSTRAINT PRACTICAL_SCORE_NN NOT NULL
, TEST_DATE             DATE        CONSTRAINT TEST_DATE_NN NOT NULL
, CONSTRAINT SCORES_SCORE_CODE_PK PRIMARY KEY(SCORE_CODE)
, CONSTRAINT SCORES_REG_CODE_FK FOREIGN KEY(REG_CODE)
             REFERENCES COURSE_REGISTRATIONS(REG_CODE)
, CONSTRAINT SCORES_OSUB_CODE_FK FOREIGN KEY(OSUB_CODE)
             REFERENCES OPEN_SUBJECTS(OSUB_CODE)
, CONSTRAINT SCORES_ATTENDANCE_SCORE_CK CHECK (ATTENDANCE_SCORE BETWEEN 0 AND 100)
, CONSTRAINT SCORES_WRITTEN_SCORE_CK CHECK (WRITTEN_SCORE BETWEEN 0 AND 100)
, CONSTRAINT SCORES_PRACTICAL_SCORE_CK CHECK (PRACTICAL_SCORE BETWEEN 0 AND 100)
);

-- 확인
SELECT *
FROM TAB;

DESC STUDENTS;

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'STUDENTS';

SELECT *
FROM PROFESSORS;

--■■■ 학생 데이터 입력 ■■■--
INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST001', 'MOON', '1022432', '문보경', '071212-1022432');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST002', 'OHOH', '1544236', '오지환', '901007-1544236');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST003', 'KIM', '1788896', '김상수', '990304-1788896');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST004', 'BON', '1566789', '신본기', '811112-1566789');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST005', 'SOOOYEON', '2312547', '지소연', '970922-2312547');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST006', 'MINA', '2978541', '이민아', '980505-2978541');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST007', 'JANG', '2362514', '장슬기', '921011-2362514');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST008', 'SONNY', '1552147', '손흥민', '990810-1552147');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST009', 'HWANG', '1122233', '황희찬', '951010-1122233');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST010', 'EUNBIN', '2574812', '박은빈', '010707-2574812');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST011', 'JINI', '2020202', '황진이', '800301-2020202');

INSERT INTO STUDENTS(ST_CODE, ST_ID, ST_PW, ST_NAME, ST_SSN)
VALUES('ST012', 'KIMMINA', '2777777', '김미나', '790102-2777777');


--■■■ 교수 데이터 입력 ■■■--
INSERT INTO PROFESSORS(PF_CODE, PF_ID, PF_PW, PF_NAME, PF_SSN, PF_DATE)
VALUES('PF001', 'MANGGOM', '1684233', '망곰이', '781110-1684233', SYSDATE);

INSERT INTO PROFESSORS(PF_CODE, PF_ID, PF_PW, PF_NAME, PF_SSN, PF_DATE)
VALUES('PF002', 'PEACH', '2491530', '어피치', '670621-2491530', SYSDATE);

INSERT INTO PROFESSORS(PF_CODE, PF_ID, PF_PW, PF_NAME, PF_SSN, PF_DATE)
VALUES('PF003', 'CHUNSIK','1125762', '춘식이', '830213-1125762', SYSDATE);

INSERT INTO PROFESSORS(PF_CODE, PF_ID, PF_PW, PF_NAME, PF_SSN, PF_DATE)
VALUES('PF004', 'RYAN', '1254873', '라이언', '730230-1254873', SYSDATE);

INSERT INTO PROFESSORS(PF_CODE, PF_ID, PF_PW, PF_NAME, PF_SSN, PF_DATE)
VALUES('PF005', 'JAYJ', '1456324', '제이지', '690324-1456324', SYSDATE);

INSERT INTO PROFESSORS(PF_CODE, PF_ID, PF_PW, PF_NAME, PF_SSN, PF_DATE)
VALUES('PF006', 'CHU', '2678431', '피카츄', '810903-2678431', SYSDATE);

INSERT INTO PROFESSORS(PF_CODE, PF_ID, PF_PW, PF_NAME, PF_SSN, PF_DATE)
VALUES('PF007', 'DANG', '2348154', '당소소', '880129-2348154', SYSDATE);


--■■■ 관리자 데이터 입력 ■■■--
INSERT INTO ADMINS(AD_CODE, AD_ID, AD_PW, AD_DATE)
VALUES('AD001', 'HYEIN', 'java001', SYSDATE);

INSERT INTO ADMINS(AD_CODE, AD_ID, AD_PW, AD_DATE)
VALUES('AD002', 'MINJI', 'java002', SYSDATE);

INSERT INTO ADMINS(AD_CODE, AD_ID, AD_PW, AD_DATE)
VALUES('AD003', 'JUHYUNG', 'java003', SYSDATE);

INSERT INTO ADMINS(AD_CODE, AD_ID, AD_PW, AD_DATE)
VALUES('AD004', 'DONGMIN', 'java004', SYSDATE);

INSERT INTO ADMINS(AD_CODE, AD_ID, AD_PW, AD_DATE)
VALUES('AD005', 'HASEONG', 'java005', SYSDATE);

INSERT INTO ADMINS(AD_CODE, AD_ID, AD_PW, AD_DATE)
VALUES('AD006', 'HANUL', 'java006', SYSDATE);


--■■■ 과목 데이터 입력 ■■■--
INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB001', 'Java');

INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB002', 'Oracle');

INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB003', 'JavaScript');

INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB004', 'JSP');

INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB005', 'HTML');

INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB006', 'CSS');

INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB007', 'Python');

INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB008', 'Spring Framework');

INSERT INTO SUBJECTS(SUB_CODE , SUB_NAME)
VALUES ('SB009', 'C++');



--■■■ 중도탈락사유 데이터 입력 ■■■--
INSERT INTO DROP_REASONS (DO_REASON_CODE, DO_REASON)
VALUES('DR001', '퇴학');

INSERT INTO DROP_REASONS (DO_REASON_CODE, DO_REASON)
VALUES('DR002', '부적응');

INSERT INTO DROP_REASONS (DO_REASON_CODE, DO_REASON)
VALUES('DR003', '해외출국');

INSERT INTO DROP_REASONS (DO_REASON_CODE, DO_REASON)
VALUES('DR004', '군 입대');

INSERT INTO DROP_REASONS (DO_REASON_CODE, DO_REASON)
VALUES('DR005', '질병');

--■■■ 과정 데이터 입력 ■■■--
INSERT INTO COURSES(CRS_CODE , CRS_NAME)
VALUES ('CO001','Java를 활용한 Full-Stack개발자 양성과정');

INSERT INTO COURSES(CRS_CODE , CRS_NAME)
VALUES ('CO002','자바와 스프링 기반 빅데이터 Full-stack 개발자 양성과정');

INSERT INTO COURSES(CRS_CODE , CRS_NAME)
VALUES ('CO003','Java(자바)그리고 AWS 활용한 Full-Stack 개발자 양성과정');

INSERT INTO COURSES(CRS_CODE , CRS_NAME)
VALUES ('CO004','자바(Java)기반 Web 이용한 스마트플랫폼 Full-Stack 개발자 양성과정');


--■■■ 교재 데이터 입력 ■■■--
INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK001', 'Do it! 점프 투 파이썬', '19800', '중학생도 첫날부터 실습하는 초고속 입문서');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK002', 'AWS 교과서', '34200', '개념 설명과 실습 예제로 실속 있게 구성한 AWS 입문서!');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK003', '실전 스프링 부트', '36000', '기본 개념부터 실무 베스트 프랙티스, 그리고 GraalVM, GraphQL, R소켓');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK004', '문제 해결을 위한 알고리즘 with 수학', '37800', '알고리즘 문제 해결에 꼭 필요한 수학적 지식과 사고력');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK005', '오라클의 정석', '27000', '한 권으로 끝내는 오라클 기본 교과서');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK006', '이것이 취업을 위한 코딩 테스트다 with 자바', '30600', '취업과 이직을 결정하는 알고리즘 인터뷰 완벽');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK007', '쿠버네티스 교과서', '39600', '기초부터 운영까지, 실전에 강한 쿠버네티스 사용법!');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK008', 'Must Have 성낙현의 JSP 자바 웹 프로그래밍', '27000', ' JSP·서블릿 기초부터 탄탄하게');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK009', '예제로 배우는 자바스크립트', '25200', '단계별 300제로 정복하는 자바스크립트');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK010', '완성된 웹사이트로 배우는 HTML와 CSS 웹 디자인', '19800', '5개 예제로 배우는 효율적인 웹사이트 제작 노하우');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK011', 'C++ 소프트웨어 디자인', '28800', '고품질 소프트웨어 구축을 위한 설계 원칙과 패턴');

INSERT INTO BOOKS (BK_CODE, BK_NAME, BK_PRICE, BK_EXPLANATION)
VALUES ('BK012', '스프링 프레임워크 첫걸음', '22500', '그림과 실습으로 쉽게 배우는 스프링 프레임워크 완벽 입문서');

--■■■ 강의실 데이터 입력 ■■■--
INSERT INTO CLASSROOMS(ROOM_CODE,ROOM_NAME,ROOM_EXPLANATION)
VALUES('CR001','A반','1층 101호 최대 수용 인원 : 25명');
INSERT INTO CLASSROOMS(ROOM_CODE,ROOM_NAME,ROOM_EXPLANATION)
VALUES('CR002','B반','1층 102호 최대 수용 인원 : 30명');

INSERT INTO CLASSROOMS(ROOM_CODE,ROOM_NAME,ROOM_EXPLANATION)
VALUES('CR003','C반','2층 201호 최대 수용 인원 : 25명');
INSERT INTO CLASSROOMS(ROOM_CODE,ROOM_NAME,ROOM_EXPLANATION)
VALUES('CR004','D반','2층 202호 최대 수용 인원 : 30명');

INSERT INTO CLASSROOMS(ROOM_CODE,ROOM_NAME,ROOM_EXPLANATION)
VALUES('CR005','E반','3층 301호 최대 수용 인원 : 25명');
INSERT INTO CLASSROOMS(ROOM_CODE,ROOM_NAME,ROOM_EXPLANATION)
VALUES('CR006','F반','3층 302호 최대 수용 인원 : 30명');

INSERT INTO CLASSROOMS(ROOM_CODE,ROOM_NAME,ROOM_EXPLANATION)
VALUES('CR007','G반','4층 401호 최대 수용 인원 : 25명');
INSERT INTO CLASSROOMS(ROOM_CODE,ROOM_NAME,ROOM_EXPLANATION)
VALUES('CR008','H반','4층 402호 최대 수용 인원 : 30명');

--■■■ 개설과정 데이터 입력 ■■■--
-- 과거
INSERT INTO OPEN_COURSES(OCRS_CODE, CRS_CODE, PF_CODE, ROOM_CODE, START_DATE, END_DATE)
VALUES('OC001', 'CO003', 'PF001', 'CR001', TO_DATE('2022-05-30','YYYY-MM-DD'), TO_DATE('2022-12-21','YYYY-MM-DD'));

INSERT INTO OPEN_COURSES(OCRS_CODE, CRS_CODE, PF_CODE, ROOM_CODE, START_DATE, END_DATE)
VALUES('OC002', 'CO004', 'PF002', 'CR002', TO_DATE('2023-01-25','YYYY-MM-DD'), TO_DATE('2023-08-16','YYYY-MM-DD'));

-- 현재
INSERT INTO OPEN_COURSES(OCRS_CODE, CRS_CODE, PF_CODE, ROOM_CODE, START_DATE, END_DATE)
VALUES('OC003', 'CO001', 'PF003', 'CR003', TO_DATE('2023-08-22','YYYY-MM-DD'), TO_DATE('2024-03-19','YYYY-MM-DD'));

INSERT INTO OPEN_COURSES(OCRS_CODE, CRS_CODE, PF_CODE, ROOM_CODE, START_DATE, END_DATE)
VALUES('OC004', 'CO002', 'PF004', 'CR004', TO_DATE('2023-08-23','YYYY-MM-DD'), TO_DATE('2024-03-20','YYYY-MM-DD'));

-- 미래
INSERT INTO OPEN_COURSES(OCRS_CODE, CRS_CODE, PF_CODE, ROOM_CODE, START_DATE, END_DATE)
VALUES('OC005', 'CO003', 'PF005', 'CR005', TO_DATE('2023-11-13','YYYY-MM-DD'), TO_DATE('2024-06-10','YYYY-MM-DD'));

INSERT INTO OPEN_COURSES(OCRS_CODE, CRS_CODE, PF_CODE, ROOM_CODE, START_DATE, END_DATE)
VALUES('OC006', 'CO001', 'PF006', 'CR006', TO_DATE('2024-01-15','YYYY-MM-DD'), TO_DATE('2024-08-07','YYYY-MM-DD'));

--■■■ 개설과목 데이터 입력 ■■■--
INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S001','OC001','SB001','BK006',TO_DATE('2022-05-30','YYYY-MM-DD'),TO_DATE('2022-08-26','YYYY-MM-DD'),30,30,40);
INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S002','OC001','SB002','BK005',TO_DATE('2022-08-29','YYYY-MM-DD'),TO_DATE('2022-12-21','YYYY-MM-DD'),30,30,40);

INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S003','OC002','SB004','BK008',TO_DATE('2023-01-25','YYYY-MM-DD'),TO_DATE('2023-04-07','YYYY-MM-DD'),20,40,40);
INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S004','OC002','SB003','BK009',TO_DATE('2022-04-10','YYYY-MM-DD'),TO_DATE('2023-08-16','YYYY-MM-DD'),20,40,40);

INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S005','OC003','SB004','BK008',TO_DATE('2023-08-22','YYYY-MM-DD'),TO_DATE('2023-12-01','YYYY-MM-DD'),20,40,40);
INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S006','OC003','SB003','BK009',TO_DATE('2023-12-04','YYYY-MM-DD'),TO_DATE('2024-03-19','YYYY-MM-DD'),20,40,40);

INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S007','OC004','SB004','BK008',TO_DATE('2023-08-23','YYYY-MM-DD'),TO_DATE('2023-12-04','YYYY-MM-DD'),20,40,40);
INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S008','OC004','SB003','BK009',TO_DATE('2023-12-05','YYYY-MM-DD'),TO_DATE('2024-03-20','YYYY-MM-DD'),20,40,40);

INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S009','OC005','SB005','BK010',TO_DATE('2023-11-13','YYYY-MM-DD'),TO_DATE('2024-02-23','YYYY-MM-DD'),20,40,40);
INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S010','OC005','SB009','BK011',TO_DATE('2024-02-26','YYYY-MM-DD'),TO_DATE('2024-06-10','YYYY-MM-DD'),40,0,60);

INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S011','OC006','SB006','BK010',TO_DATE('2024-01-15','YYYY-MM-DD'),TO_DATE('2024-04-12','YYYY-MM-DD'),30,30,40);
INSERT INTO OPEN_SUBJECTS(OSUB_CODE, OCRS_CODE, SUB_CODE, BK_CODE, SUB_START_DATE
                        , SUB_END_DATE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE)
VALUES('0S012','OC006','SB008','BK012',TO_DATE('2024-04-15','YYYY-MM-DD'),TO_DATE('2024-08-07','YYYY-MM-DD'),30,20,50);


--■■■ 중도탈락 데이터 입력 ■■■--
INSERT INTO DROP_OUT_LISTS(DO_CODE, REG_CODE, DO_REASON_CODE, DO_DATE)
VALUES('DO001', 'RG001', 'DR005', TO_DATE('2022-10-20','YYYY-MM-DD'));

INSERT INTO DROP_OUT_LISTS(DO_CODE, REG_CODE, DO_REASON_CODE, DO_DATE)
VALUES('DO002', 'RG005', 'DR002', TO_DATE('2023-09-20','YYYY-MM-DD'));


--■■■ 수강신청 데이터 입력 ■■■--
INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG001','ST001','OC001',TO_DATE('2015-04-30','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG002','ST002','OC001',TO_DATE('2019-07-29','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG003','ST003','OC002',TO_DATE('2020-10-10','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG004','ST004','OC002',TO_DATE('2021-11-11','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG005','ST005','OC003',TO_DATE('2022-1-24','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE, REG_DATE)
VALUES ('RG006','ST006','OC003',TO_DATE('2022-12-25','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG007','ST007','OC004',TO_DATE('2023-05-02','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG008','ST008','OC004',TO_DATE('2023-06-30','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG009','ST009','OC005',TO_DATE('2023-10-04','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG010','ST010','OC005',TO_DATE('2023-11-12','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG011','ST011','OC006',TO_DATE('2023-12-31','YYYY-MM-DD'));

INSERT INTO COURSE_REGISTRATIONS(REG_CODE , ST_CODE, OCRS_CODE,REG_DATE)
VALUES ('RG012','ST012','OC006',TO_DATE('2024-01-01','YYYY-MM-DD'));




--■■■ 성적 데이터 입력 ■■■--
INSERT INTO SCORES(SCORE_CODE, REG_CODE, OSUB_CODE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE, TEST_DATE)
VALUES('SC001', 'RG001', '0S001', 20, 26, 30, TO_DATE('2022-08-26', 'YYYY-MM-DD'));

INSERT INTO SCORES(SCORE_CODE, REG_CODE, OSUB_CODE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE, TEST_DATE)
VALUES('SC002', 'RG001', '0S002', 25, 29, 26, TO_DATE('2022-12-21', 'YYYY-MM-DD'));

INSERT INTO SCORES(SCORE_CODE, REG_CODE, OSUB_CODE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE, TEST_DATE)
VALUES('SC003', 'RG002', '0S001', 21, 29, 20, TO_DATE('2022-08-26', 'YYYY-MM-DD'));

INSERT INTO SCORES(SCORE_CODE, REG_CODE, OSUB_CODE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE, TEST_DATE)
VALUES('SC004', 'RG002', '0S002', 29, 26, 30, TO_DATE('2022-12-21', 'YYYY-MM-DD'));

INSERT INTO SCORES(SCORE_CODE, REG_CODE, OSUB_CODE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE, TEST_DATE)
VALUES('SC005', 'RG003', '0S003', 20, 35, 30, TO_DATE('2023-04-07', 'YYYY-MM-DD'));

INSERT INTO SCORES(SCORE_CODE, REG_CODE, OSUB_CODE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE, TEST_DATE)
VALUES('SC006', 'RG003', '0S004', 16, 32, 38, TO_DATE('2023-08-16', 'YYYY-MM-DD'));

INSERT INTO SCORES(SCORE_CODE, REG_CODE, OSUB_CODE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE, TEST_DATE)
VALUES('SC007', 'RG004', '0S003', 10, 30, 35, TO_DATE('2023-04-07', 'YYYY-MM-DD'));

INSERT INTO SCORES(SCORE_CODE, REG_CODE, OSUB_CODE, ATTENDANCE_SCORE, WRITTEN_SCORE, PRACTICAL_SCORE, TEST_DATE)
VALUES('SC008', 'RG004', '0S004', 20, 38, 35, TO_DATE('2023-08-16', 'YYYY-MM-DD'));

SELECT *
FROM SCORES;


SELECT *
FROM TAB;

---------------------------------------------------------------------------------------------

SELECT *
FROM CLASSROOMS;



SELECT *
FROM OPEN_COURSES;



SELECT *
FROM ADMINS;

SELECT *
FROM OPEN_SUBJECTS;

---------------------------------------------------------------------------------

SELECT AD_CODE
FROM ADMINS
WHERE AD_ID = AD_ID
AND AD_PW = AD_PW;

---------------------------------------------------------------------------------

SELECT *
FROM OPEN_SUBJECTS;

SELECT PF_NAME
FROM PROFESSORS
WHERE PF_ID = PF_ID
AND PF_PW = SUBSTR(PF_SSN, 8, 7);

SELECT B.PF_NAME "교수자명", F.SUB_NAME "배정된 과목명", A.SUB_START_DATE "시작일", A.SUB_END_DATE "종료일", D.BK_NAME "교재명", E.ROOM_NAME "강의실"
    , CASE WHEN SYSDATE > A.SUB_END_DATE THEN '강의종료'
         WHEN SYSDATE < A.SUB_START_DATE THEN '강의예정'
         WHEN SYSDATE > A.SUB_START_DATE AND SYSDATE < A.SUB_END_DATE THEN '강의중' ELSE '강의없음' END "강의진행여부"
FROM OPEN_SUBJECTS A, PROFESSORS B, OPEN_COURSES C, BOOKS D, CLASSROOMS E, SUBJECTS F
WHERE B.PF_CODE = C.PF_CODE
AND C.OCRS_CODE = A.OCRS_CODE
AND F.SUB_CODE = A.SUB_CODE
AND A.BK_CODE = D.BK_CODE
AND C.ROOM_CODE = E.ROOM_CODE;

-- 뷰생성
CREATE OR REPLACE VIEW VIEW_PROFESSORS
AS
SELECT B.PF_NAME "교수자명", F.SUB_NAME "배정된 과목명", A.SUB_START_DATE "시작일", A.SUB_END_DATE "종료일", D.BK_NAME "교재명", E.ROOM_NAME "강의실"
    , CASE WHEN SYSDATE > A.SUB_END_DATE THEN '강의종료'
         WHEN SYSDATE < A.SUB_START_DATE THEN '강의예정'
         WHEN SYSDATE > A.SUB_START_DATE AND SYSDATE < A.SUB_END_DATE THEN '강의중' ELSE '강의없음' END "강의진행여부"
FROM OPEN_SUBJECTS A, PROFESSORS B, OPEN_COURSES C, BOOKS D, CLASSROOMS E, SUBJECTS F
WHERE B.PF_CODE = C.PF_CODE
AND C.OCRS_CODE = A.OCRS_CODE
AND F.SUB_CODE = A.SUB_CODE
AND A.BK_CODE = D.BK_CODE
AND C.ROOM_CODE = E.ROOM_CODE;

SELECT *
FROM VIEW_PROFESSORS;

/*-- 자동으로 패스워드 등록하는 트리거
CREATE OR REPLACE TRIGGER TRG_PROFESSORS
        AFTER
        INSERT ON PROFESSORS
        FOR EACH ROW
DECLARE
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    UPDATE PROFESSORS
    SET PF_PW = SUBSTR(PF_SSN, 8, 7)
    WHERE PF_ID = :NEW.PF_ID;
    
    --예외 처리
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20004, '올바르지 않음');
END;*/

SELECT *
FROM PROFESSORS;

--교수 시퀀스
CREATE SEQUENCE PROFESSORS_SEQ
INCREMENT BY 1
START WITH 1
MINVALUE 1
MAXVALUE 9999
NOCYCLE
NOCACHE;

--교수 등록
CREATE OR REPLACE PROCEDURE PRC_PROFESSORS_INSERT
( V_PF_ID       IN PROFESSORS.PF_ID%TYPE
, V_PF_NAME     IN PROFESSORS.PF_NAME%TYPE
, V_PF_SSN      IN PROFESSORS.PF_SSN%TYPE
)
IS
    V_PF_ID2 PROFESSORS.PF_ID%TYPE;
    V_FLAG NUMBER := 0;
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_FLAG
    FROM PROFESSORS
    WHERE PF_ID = V_PF_ID;

    IF V_FLAG = 1
        THEN RAISE_APPLICATION_ERROR(-20050, '이미 등록된 ID입니다.' );
        ROLLBACK;
    END IF;
    
    IF (V_FLAG = 1)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    -- 데이터 입력 쿼리문 구성
    INSERT INTO PROFESSORS(PF_CODE, PF_ID, PF_PW, PF_NAME, PF_SSN)
    VALUES(('PF' || LPAD(TO_CHAR(PROFESSORS_SEQ.NEXTVAL+8), 3, '0')), V_PF_ID, SUBSTR(V_PF_SSN, 8, 7), V_PF_NAME, V_PF_SSN);

    --커밋
    --COMMIT;
END;

--교수 수정
CREATE OR REPLACE PROCEDURE PRC_PROFESSORS_UPDATE
( V_PF_CODE     IN PROFESSORS.PF_CODE%TYPE
, V_PF_ID       IN PROFESSORS.PF_ID%TYPE
, V_PF_PW       IN PROFESSORS.PF_PW %TYPE
, V_PF_NAME     IN PROFESSORS.PF_NAME%TYPE
, V_PF_SSN      IN PROFESSORS.PF_SSN%TYPE
, V_PF_DATE     IN PROFESSORS.PF_DATE%TYPE
)
IS
    V_PF_ID2 PROFESSORS.PF_ID%TYPE;
    V_FLAG NUMBER := 0;
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_PF_ID2
    FROM PROFESSORS
    WHERE PF_CODE NOT IN V_PF_CODE
    AND PF_ID = V_PF_ID;
    
    IF V_PF_ID2 = 1
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE PROFESSORS
    SET PF_ID = V_PF_ID ,PF_PW = V_PF_PW, PF_NAME = V_PF_NAME, PF_SSN = V_PF_SSN, PF_DATE = V_PF_DATE
    WHERE PF_CODE = V_PF_CODE;
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20098, '이미 등록된 ID입니다.' );
        ROLLBACK;
    
    --커밋
    --COMMIT;
END;


-- 교수 삭제
CREATE OR REPLACE TRIGGER TRG_PROFESSORS_DELETE
-- 자식들을 먼저 다 제거해야 부모테이블에서 삭제 가능하므로 트리거에서 BEFORE 사용  
        BEFORE
        DELETE ON PROFESSORS
        FOR EACH ROW
BEGIN
    DELETE
    FROM DROP_OUT_LISTS
    WHERE REG_CODE IN (SELECT REG_CODE
                        FROM COURSE_REGISTRATIONS
                        WHERE OCRS_CODE IN (SELECT OCRS_CODE
                                             FROM OPEN_COURSES
                                            WHERE PF_CODE = :OLD.PF_CODE));
    DELETE
    FROM SCORES
    WHERE REG_CODE IN (SELECT REG_CODE
                        FROM COURSE_REGISTRATIONS
                        WHERE OCRS_CODE IN (SELECT OCRS_CODE
                                             FROM OPEN_COURSES
                                            WHERE PF_CODE = :OLD.PF_CODE));
    DELETE
    FROM COURSE_REGISTRATIONS
    WHERE OCRS_CODE IN (SELECT OCRS_CODE
                        FROM OPEN_COURSES
                        WHERE PF_CODE = :OLD.PF_CODE);
    DELETE
    FROM OPEN_SUBJECTS
    WHERE OCRS_CODE IN (SELECT OCRS_CODE
                        FROM OPEN_COURSES
                        WHERE PF_CODE = :OLD.PF_CODE);
    DELETE
    FROM OPEN_COURSES
    WHERE PF_CODE = :OLD.PF_CODE;
END;

---------------------------------------------------------------------------------

--과정 시퀀스
CREATE SEQUENCE COURSES_SEQ
INCREMENT BY 1
START WITH 1
MINVALUE 1
MAXVALUE 9999
NOCYCLE
NOCACHE;

--개설과정 시퀀스
CREATE SEQUENCE OPEN_COURSES_SEQ
INCREMENT BY 1
START WITH 1
MINVALUE 1
MAXVALUE 9999
NOCYCLE
NOCACHE;


--뷰생성
CREATE OR REPLACE VIEW VIEW_COURSES
AS
SELECT A.CRS_NAME "과정명", C.ROOM_NAME "강의실", D.SUB_NAME "과목명", E.SUB_START_DATE "시작일", E.SUB_END_DATE "종료일", F.BK_NAME "교재명", G.PF_NAME "교수자명"
FROM COURSES A, OPEN_COURSES B, CLASSROOMS C, SUBJECTS D, OPEN_SUBJECTS E, BOOKS F, PROFESSORS G
WHERE A.CRS_CODE = B.CRS_CODE
AND B.ROOM_CODE = C.ROOM_CODE
AND D.SUB_CODE = E.SUB_CODE
AND B.OCRS_CODE = E.OCRS_CODE
AND E.BK_CODE = F.BK_CODE
AND B.PF_CODE = G.PF_CODE;


SELECT A.CRS_NAME "과정명", C.ROOM_NAME "강의실", D.SUB_NAME "과목명", E.SUB_START_DATE "시작일", E.SUB_END_DATE "종료일", F.BK_NAME "교재명", G.PF_NAME "교수자명"
FROM COURSES A, OPEN_COURSES B, CLASSROOMS C, SUBJECTS D, OPEN_SUBJECTS E, BOOKS F, PROFESSORS G
WHERE A.CRS_CODE = B.CRS_CODE
AND B.ROOM_CODE = C.ROOM_CODE
AND D.SUB_CODE = E.SUB_CODE
AND B.OCRS_CODE = E.OCRS_CODE
AND E.BK_CODE = F.BK_CODE
AND B.PF_CODE = G.PF_CODE;


--과정 등록
CREATE OR REPLACE PROCEDURE PRC_COURSES_INSERT
( V_CRS_NAME     IN COURSES.CRS_NAME%TYPE
)
IS
    FLAG_COURSES NUMBER; -- FLAG 변수
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    SELECT NVL((SELECT 1
               FROM COURSES
               WHERE CRS_NAME = V_CRS_NAME), 0) INTO FLAG_COURSES
    FROM DUAL;
    
    IF (FLAG_COURSES != 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    INSERT INTO COURSES(CRS_CODE, CRS_NAME)
    VALUES(('CO' || LPAD(TO_CHAR(COURSES_SEQ.NEXTVAL+4), 3, '0')), V_CRS_NAME);
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20098, '이미 등록된 과정입니다.' );
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    --커밋
    --COMMIT;
END;

--과정 수정
CREATE OR REPLACE PROCEDURE PRC_COURSES_UPDATE
( V_CRS_CODE     IN COURSES.CRS_CODE%TYPE
, V_CRS_NAME     IN COURSES.CRS_NAME%TYPE
)
IS
    FLAG_COURSES NUMBER; -- FLAG 변수
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    SELECT NVL((SELECT 1
               FROM COURSES
               WHERE CRS_NAME = V_CRS_NAME), 0) INTO FLAG_COURSES
    FROM DUAL;
    
    IF (FLAG_COURSES != 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE COURSES
    SET CRS_NAME = V_CRS_NAME
    WHERE CRS_CODE = V_CRS_CODE;

    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20098, '이미 등록된 과정입니다.' );
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    --커밋
    --COMMIT;
END;

SELECT *
FROM OPEN_COURSES;


--개설과정등록
CREATE OR REPLACE PROCEDURE PRC_OPEN_COURSES_INSERT
( V_CRS_CODE     IN OPEN_COURSES.CRS_CODE%TYPE
, V_PF_CODE      IN OPEN_COURSES.PF_CODE%TYPE
, V_ROOM_CODE    IN OPEN_COURSES.ROOM_CODE%TYPE
, V_START_DATE   IN OPEN_COURSES.START_DATE%TYPE
, V_END_DATE     IN OPEN_COURSES.END_DATE%TYPE
)
IS
    FLAG_COURSES  NUMBER;
    USER_DEFINE_ERROR1    EXCEPTION;
    
    FLAG_CLASSROOMS  NUMBER;
    USER_DEFINE_ERROR2    EXCEPTION;
    
    FLAG_PROFESSORS  NUMBER;
    USER_DEFINE_ERROR3    EXCEPTION;
    
    START_DATE2     OPEN_COURSES.START_DATE%TYPE;
    END_DATE2       OPEN_COURSES.END_DATE%TYPE;
    USER_DEFINE_ERROR4    EXCEPTION;
    
    V_OCRS_CODE       OPEN_COURSES.OCRS_CODE%TYPE;
    
    START_DATE3     OPEN_COURSES.START_DATE%TYPE;
    END_DATE3       OPEN_COURSES.END_DATE%TYPE;
    USER_DEFINE_ERROR5    EXCEPTION;
    USER_DEFINE_ERROR6    EXCEPTION;
    
    CURSOR COURSESCURSOR IS
    SELECT START_DATE, END_DATE
    FROM OPEN_COURSES
    WHERE ROOM_CODE = V_ROOM_CODE;
    
    CURSOR COURSESCURSOR2 IS
    SELECT START_DATE, END_DATE
    FROM OPEN_COURSES
    WHERE PF_CODE = V_PF_CODE;
BEGIN
    -- 시작일이 더 클때 에러발생
    IF V_START_DATE >= V_END_DATE THEN
          RAISE USER_DEFINE_ERROR6;
    END IF;
    
    
    -- 해당 과정이 없을때
    SELECT COUNT(*) INTO FLAG_COURSES
    FROM COURSES
    WHERE CRS_CODE =V_CRS_CODE;
    
    IF (FLAG_COURSES = 0)
        THEN RAISE USER_DEFINE_ERROR1;
    END IF;
    
    -- 강의실이 없을때
    SELECT COUNT(*) INTO FLAG_CLASSROOMS
    FROM CLASSROOMS
    WHERE ROOM_CODE = V_ROOM_CODE;
    
    IF (FLAG_CLASSROOMS = 0)
        THEN RAISE USER_DEFINE_ERROR2;
    END IF;
    
    -- 교수님이 없을때
    SELECT COUNT(*) INTO FLAG_PROFESSORS
    FROM PROFESSORS
    WHERE PF_CODE = V_PF_CODE;
    
    IF (FLAG_PROFESSORS = 0)
        THEN RAISE USER_DEFINE_ERROR3;
    END IF;

    --개설과정 - 강의실
    OPEN COURSESCURSOR;
    LOOP
        FETCH COURSESCURSOR INTO START_DATE2, END_DATE2;
        EXIT WHEN COURSESCURSOR%NOTFOUND;
        IF ((START_DATE2 BETWEEN V_START_DATE AND V_END_DATE) OR (END_DATE2 BETWEEN V_START_DATE AND V_END_DATE) 
            OR (V_START_DATE BETWEEN START_DATE2 AND END_DATE2) OR (V_END_DATE BETWEEN START_DATE2 AND END_DATE2)) THEN
             RAISE USER_DEFINE_ERROR4;
        END IF;
    END LOOP;
    CLOSE COURSESCURSOR;
    
    --개설과정 - 교수
    OPEN COURSESCURSOR2;
    LOOP
        FETCH COURSESCURSOR2 INTO START_DATE3, END_DATE3;
        EXIT WHEN COURSESCURSOR2%NOTFOUND;
        IF ((START_DATE3 BETWEEN V_START_DATE AND V_END_DATE) OR (END_DATE3 BETWEEN V_START_DATE AND V_END_DATE) 
            OR (V_START_DATE BETWEEN START_DATE3 AND END_DATE3) OR (V_END_DATE BETWEEN START_DATE3 AND END_DATE3)) THEN
             RAISE USER_DEFINE_ERROR5;
        END IF;
    END LOOP;
    CLOSE COURSESCURSOR2;

    -- 데이터 입력 쿼리문 구성
    INSERT INTO OPEN_COURSES(OCRS_CODE, CRS_CODE, PF_CODE, ROOM_CODE, START_DATE, END_DATE)
    VALUES(('OC' || LPAD(TO_CHAR(OPEN_COURSES_SEQ.NEXTVAL), 3, '0')), V_CRS_CODE, V_PF_CODE, V_ROOM_CODE, V_START_DATE, V_END_DATE);
    
    
     -- 예외처리
        EXCEPTION
        WHEN USER_DEFINE_ERROR1
            THEN RAISE_APPLICATION_ERROR(-20099, '해당 과정이 없습니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR2
            THEN RAISE_APPLICATION_ERROR(-20099, '강의실이 없습니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR3
            THEN RAISE_APPLICATION_ERROR(-20099, '담당 교수님이 없습니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR4
            THEN RAISE_APPLICATION_ERROR(-20099, '기간 내에 같은 강의실이 존재합니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR5
            THEN RAISE_APPLICATION_ERROR(-20099, '기간 내에 같은 교수님이 존재합니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR6
            THEN RAISE_APPLICATION_ERROR(-20099, '올바르게 입력하세요');
            ROLLBACK;
END;



--개설과정수정
CREATE OR REPLACE PROCEDURE PRC_OPEN_COURSES_UPDATE
( V_OCRS_CODE    IN OPEN_COURSES.OCRS_CODE%TYPE
, V_CRS_CODE     IN OPEN_COURSES.CRS_CODE%TYPE
, V_PF_CODE      IN OPEN_COURSES.PF_CODE%TYPE
, V_ROOM_CODE    IN OPEN_COURSES.ROOM_CODE%TYPE
, V_START_DATE   IN OPEN_COURSES.START_DATE%TYPE
, V_END_DATE     IN OPEN_COURSES.END_DATE%TYPE
)
IS
    SUBJECTS_START  OPEN_SUBJECTS.SUB_START_DATE%TYPE;
    SUBJECTS_END    OPEN_SUBJECTS.SUB_END_DATE%TYPE;
    V_OSUB_CODE     OPEN_SUBJECTS.OSUB_CODE%TYPE;
    END_DATE2     OPEN_COURSES.END_DATE%TYPE;
    START_DATE2     OPEN_COURSES.START_DATE%TYPE;
    
    FLAG_COURSES  NUMBER;
    USER_DEFINE_ERROR1    EXCEPTION;
    
    FLAG_CLASSROOMS  NUMBER;
    USER_DEFINE_ERROR2    EXCEPTION;
    
    FLAG_PROFESSORS  NUMBER;
    USER_DEFINE_ERROR3    EXCEPTION;
    
    
    USER_DEFINE_ERROR4    EXCEPTION;
    
    USER_DEFINE_ERROR5    EXCEPTION;
    
    USER_DEFINE_ERROR6    EXCEPTION;

    START_DATE3     OPEN_COURSES.START_DATE%TYPE;
    END_DATE3       OPEN_COURSES.END_DATE%TYPE;
    USER_DEFINE_ERROR7    EXCEPTION;
    
    CURSOR SUBJECTSCURSOR IS
    SELECT OSUB_CODE, SUB_END_DATE
    FROM OPEN_SUBJECTS
    WHERE OCRS_CODE = V_OCRS_CODE;
    
    
    CURSOR COURSESCURSOR IS
    SELECT START_DATE, END_DATE
    FROM OPEN_COURSES
    WHERE ROOM_CODE = V_ROOM_CODE
    AND OCRS_CODE != V_OCRS_CODE;
    
    CURSOR COURSESCURSOR2 IS
    SELECT START_DATE, END_DATE
    FROM OPEN_COURSES
    WHERE PF_CODE = V_PF_CODE
    AND OCRS_CODE != V_OCRS_CODE;;
    
BEGIN
    -- 이미 끝난 과정 수정하려고 하면 에러 발생하게 SYSDATE랑 과정종료일이랑 비교
    SELECT END_DATE INTO END_DATE2
    FROM OPEN_COURSES
    WHERE OCRS_CODE = V_OCRS_CODE;

    IF SYSDATE > END_DATE2 THEN
        RAISE USER_DEFINE_ERROR6;
    END IF;
    
    -- 해당 과정이 없을때
    SELECT COUNT(*) INTO FLAG_CLASSROOMS
    FROM CLASSROOMS
    WHERE ROOM_CODE = V_ROOM_CODE;
    
    IF (FLAG_COURSES = 0)
        THEN RAISE USER_DEFINE_ERROR1;
    END IF;
    
    -- 강의실이 없을때
    SELECT COUNT(*) INTO FLAG_CLASSROOMS
    FROM CLASSROOMS
    WHERE ROOM_CODE = V_ROOM_CODE;
    
    IF (FLAG_CLASSROOMS = 0)
        THEN RAISE USER_DEFINE_ERROR2;
    END IF;
    
    -- 교수님이 없을때
    SELECT COUNT(*) INTO FLAG_PROFESSORS
    FROM PROFESSORS
    WHERE PF_CODE = V_PF_CODE;
    
    IF (FLAG_PROFESSORS = 0)
        THEN RAISE USER_DEFINE_ERROR3;
    END IF;
    
    --개설과목 - 개설과정 커서
    OPEN SUBJECTSCURSOR;
    LOOP
        FETCH SUBJECTSCURSOR INTO V_OSUB_CODE, SUBJECTS_END;
            -- 바꾸는 개설과정종료일 >= 개설과목 종료일
            IF (V_END_DATE < SUBJECTS_END) THEN
                 RAISE USER_DEFINE_ERROR4;
            END IF;
            EXIT WHEN SUBJECTSCURSOR%NOTFOUND;
    END LOOP;
    CLOSE SUBJECTSCURSOR;
    
    
    --개설과정 - 강의실
    OPEN COURSESCURSOR;
    LOOP
        FETCH COURSESCURSOR INTO START_DATE2, END_DATE2;
                EXIT WHEN COURSESCURSOR%NOTFOUND;
            IF ((START_DATE2 BETWEEN V_START_DATE AND V_END_DATE) OR (END_DATE2 BETWEEN V_START_DATE AND V_END_DATE) 
            OR (V_START_DATE BETWEEN START_DATE2 AND END_DATE2) OR (V_END_DATE BETWEEN START_DATE2 AND END_DATE2)) THEN
                 RAISE USER_DEFINE_ERROR5;
            END IF;

    END LOOP;
    CLOSE COURSESCURSOR;
    
    --개설과정 - 교수
    OPEN COURSESCURSOR2;
    LOOP
        FETCH COURSESCURSOR2 INTO START_DATE3, END_DATE3;
        EXIT WHEN COURSESCURSOR2%NOTFOUND;
        IF ((START_DATE3 BETWEEN V_START_DATE AND V_END_DATE) OR (END_DATE3 BETWEEN V_START_DATE AND V_END_DATE) 
            OR (V_START_DATE BETWEEN START_DATE3 AND END_DATE3) OR (V_END_DATE BETWEEN START_DATE3 AND END_DATE3)) THEN
             RAISE USER_DEFINE_ERROR7;
        END IF;
    END LOOP;
    CLOSE COURSESCURSOR2;
    
    -- 데이터 수정 쿼리문 구성
    UPDATE OPEN_COURSES
    SET CRS_CODE = V_CRS_CODE, PF_CODE = V_PF_CODE, ROOM_CODE = V_ROOM_CODE, START_DATE = V_START_DATE, END_DATE = V_END_DATE
    WHERE OCRS_CODE = V_OCRS_CODE;
    -- 예외처리
        EXCEPTION
        WHEN USER_DEFINE_ERROR1
            THEN RAISE_APPLICATION_ERROR(-20099, '해당 과정이 없습니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR2
            THEN RAISE_APPLICATION_ERROR(-20099, '강의실이 없습니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR3
            THEN RAISE_APPLICATION_ERROR(-20099, '담당 교수님이 없습니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR4
            THEN RAISE_APPLICATION_ERROR(-20099, '에러 발생');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR5
            THEN RAISE_APPLICATION_ERROR(-20099, '기간 내에 같은 강의실이 존재합니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR6
            THEN RAISE_APPLICATION_ERROR(-20099, '이미 종료된 과정입니다.');
            ROLLBACK;
        WHEN USER_DEFINE_ERROR7
            THEN RAISE_APPLICATION_ERROR(-20099, '기간 내에 같은 교수님이 존재합니다.');
            ROLLBACK;
END;


