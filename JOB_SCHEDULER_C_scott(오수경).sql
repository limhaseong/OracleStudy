SELECT USER
FROM DUAL;
--==>> SCOTT

/*
=================== ○○ 안내사항 ○○ ===================
1. 잡에 대한 로그는 못지움
    EX) SELECT *
        FROM USER_SCHEDULER_JOB_LOG
        WHERE JOB_NAME = 'JOB_PRC_WEEKREPORT_NTF';
2. 시논님?오브젝트 관리 객체
3. 프로그램 타입, 프로그램 액션
   프로그램, 잡, 스케줄러 묶어쓰는 과정에서 PSLQL_BLOCK 사용했지만...
   프로그램 타입, 프로그램 액션에는 
   잡타입, 액션과 동일한 규칙이 적용될 수 있음
   
   오라클 잡이 있었는데, 오라클 10g버전에서 부터 오라클잡 사용가능함
   기존버전 사용가능
4. 프로시저의 실행여부는 커서의 길이와 상관없음
========================================================== 
*/

-- =============================================================================
--               ○○ FINAL PROJECT 일부 테이블 샘플링 ○○ 
-- =============================================================================
-- ○ 테이블 생성 --------------------------------------------------------------
-- ▶▶▶ (필요시) 테이블 삭제
DROP TABLE PART_CHECK;
DROP TABLE WEEKREPORT_UNWRT;
DROP TABLE WEEKLY_REPORT;
DROP TABLE WEEKREPORT_NTF;

-- 참여확인
CREATE TABLE PART_CHECK
( PART_CHECK_NO     NUMBER          -- 참여확인 번호
, PART_CHECK_NAME   VARCHAR2(100)   -- 참여확인 이름
, PART_SUPPORT_CODE NUMBER          -- 팀참여지원코드
, CONSTRAINT PART_CHECK_NO PRIMARY KEY (PART_CHECK_NO)
);
--==>> Table PART_CHECK이(가) 생성되었습니다.

-- 주간업무보고
CREATE TABLE WEEKLY_REPORT
( WWR_NO            NUMBER                  -- 주간업무보고 번호
, WWR_FILE_ROUTE    VARCHAR2(100)           -- 첨부파일명
, WWR_NAME          VARCHAR2(100)           -- 제목
, WWR_CONTENTS      VARCHAR2(100)           -- 내용
, WWR_DATE          DATE DEFAULT SYSDATE    -- 작성일
, PART_CHECK_NO     NUMBER                  -- 참여확인번호(작성자)
, CONSTRAINT WWR_NO_PK PRIMARY KEY (WWR_NO)
, CONSTRAINT PART_CHECK_NO_FK FOREIGN KEY(PART_CHECK_NO)
             REFERENCES PART_CHECK(PART_CHECK_NO)
);
--==>> Table WEEKLY_REPORT이(가) 생성되었습니다.

-- 주간업무보고 미작성
CREATE TABLE WEEKREPORT_UNWRT
( WEEKREPORT_UNWRT_NO   NUMBER              -- 주간업무보고 미작성번호
, CREATE_DATE           DATE                -- 생성일자
, CONSTRAINT WEEKREPORT_UNWRT_NO_PK PRIMARY KEY(WEEKREPORT_UNWRT_NO)
);
--==>> Table WEEKREPORT_UNWRT이(가) 생성되었습니다.

-- 주간업무보고 미작성 알림
CREATE TABLE WEEKREPORT_NTF
( WEEKREPORT_NTF_NO         NUMBER          -- 주간업무보고 미작성알림번호
, READ_DATE                 DATE            -- 읽은 날짜
, PART_CHECK_NO             NUMBER          -- 참여확인 번호
, WEEKREPORT_UNWRT_NO       NUMBER          -- 주간업무보고 미작성번호
, CONSTRAINT WEEKREPORT_NTF_NO_PK PRIMARY KEY(WEEKREPORT_NTF_NO)
, CONSTRAINT WEEKREPORT_UNWRT_NO_FK FOREIGN KEY(WEEKREPORT_UNWRT_NO)
             REFERENCES WEEKREPORT_UNWRT(WEEKREPORT_UNWRT_NO)
, CONSTRAINT WREPORT_NTF_PART_CHECK_NO_FK FOREIGN KEY(PART_CHECK_NO)    -- 제약조건 참조키명 다르게 구성함
             REFERENCES PART_CHECK(PART_CHECK_NO)
);
--==>> Table WEEKREPORT_NTF이(가) 생성되었습니다.


-- ○ 시퀀스 생성 --------------------------------------------------------------
-- ▶▶▶ (필요시) 시퀀스 삭제
DROP SEQUENCE SEQ_PART_CHECK;
DROP SEQUENCE SEQ_W_REPORT;
DROP SEQUENCE SEQ_WREPORT_UNWRT;
DROP SEQUENCE SEQ_WREPORT_NTF;

-- 참여확인 시퀀스
CREATE SEQUENCE SEQ_PART_CHECK
NOCACHE;

-- 주간업무보고 시퀀스
CREATE SEQUENCE SEQ_W_REPORT
NOCACHE;

-- 주간업무보고 미작성 시퀀스
CREATE SEQUENCE SEQ_WREPORT_UNWRT
NOCACHE;

-- 주간업무보고 미작성알림
CREATE SEQUENCE SEQ_WREPORT_NTF
NOCACHE;




-- ○ 샘플데이터 생성 --------------------------------------------------------------
-- ▶▶▶ (필요시) 데이터 삭제
DELETE FROM PART_CHECK;
DELETE FROM WEEKLY_REPORT;


-- 참여확인 샘플데이터
-- 참여확인(참여확인 번호, 참여확인 이름, 팀참여지원코드)
INSERT INTO PART_CHECK(PART_CHECK_NO, PART_CHECK_NAME, PART_SUPPORT_CODE)
VALUES(SEQ_PART_CHECK.NEXTVAL, '이주형', 1);
INSERT INTO PART_CHECK(PART_CHECK_NO, PART_CHECK_NAME, PART_SUPPORT_CODE)
VALUES(SEQ_PART_CHECK.NEXTVAL, '임하성', 1);
INSERT INTO PART_CHECK(PART_CHECK_NO, PART_CHECK_NAME, PART_SUPPORT_CODE)
VALUES(SEQ_PART_CHECK.NEXTVAL, '엄재용', 1);
INSERT INTO PART_CHECK(PART_CHECK_NO, PART_CHECK_NAME, PART_SUPPORT_CODE)
VALUES(SEQ_PART_CHECK.NEXTVAL, '박나영', 1);
INSERT INTO PART_CHECK(PART_CHECK_NO, PART_CHECK_NAME, PART_SUPPORT_CODE)
VALUES(SEQ_PART_CHECK.NEXTVAL, '문정환', 1);
INSERT INTO PART_CHECK(PART_CHECK_NO, PART_CHECK_NAME, PART_SUPPORT_CODE)
VALUES(SEQ_PART_CHECK.NEXTVAL, '오수경', 1);
--==>> 1 행 이(가) 삽입되었습니다. * 6

SELECT * FROM PART_CHECK;
--==>>
/*
1	이주형	1
2	임하성	1
3	엄재용	1
4	박나영	1
5	문정환	1
6	오수경	1
*/


-- 주간업무보고 샘플데이터
-- 주간업무보고(주간업무보고 번호,제목,내용,작성일,참여확인번호(작성자))
INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
VALUES(SEQ_W_REPORT.NEXTVAL, '이주형 주간업무보고', '기획아이디어 리서치', TO_DATE('2024-01-08 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 1);
INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
VALUES(SEQ_W_REPORT.NEXTVAL, '임하성 주간업무보고', '주제선정', TO_DATE('2024-01-08 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 2);
INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
VALUES(SEQ_W_REPORT.NEXTVAL, '엄재용 주간업무보고', '주제선정', TO_DATE('2024-01-09 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 3);
INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
VALUES(SEQ_W_REPORT.NEXTVAL, '박나영 주간업무보고', '주제선정', TO_DATE('2024-01-10 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 4);
--INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
--VALUES(SEQ_W_REPORT.NEXTVAL, '문정환 주간업무보고', '주제선정', TO_DATE('2024-01-11 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 5);

INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
VALUES(SEQ_W_REPORT.NEXTVAL, '이주형 주간업무보고', '기획아이디어 리서치', TO_DATE('2024-01-15 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 1);
INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
VALUES(SEQ_W_REPORT.NEXTVAL, '임하성 주간업무보고', '주제선정', TO_DATE('2024-01-16 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 2);
INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
VALUES(SEQ_W_REPORT.NEXTVAL, '엄재용 주간업무보고', '주제선정', TO_DATE('2024-01-17 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 3);
INSERT INTO WEEKLY_REPORT(WWR_NO, WWR_NAME, WWR_CONTENTS, WWR_DATE, PART_CHECK_NO)
VALUES(SEQ_W_REPORT.NEXTVAL, '박나영 주간업무보고', '주제선정', TO_DATE('2024-01-18 14:39:10', 'YYYY-MM-DD HH24:MI:SS'), 4);

-- (중요!)♣♣♣♣ 첫번째 INSERT 이후 커밋필요~~!!! ♣♣♣♣
COMMIT;

--==>> 1 행 이(가) 삽입되었습니다.

SELECT * FROM WEEKLY_REPORT;
DELETE FROM WEEKLY_REPORT;

-- =============================================================================
--                          ○○ 프로시저 구성 ○○ 
-- =============================================================================
-- 뷰 생성 (버전1, 2 모두 사용가능)
-- 뷰 생성 (버전1)
CREATE OR REPLACE VIEW NOT_UNWRT
AS
SELECT PART_CHECK_NO
FROM PART_CHECK
WHERE PART_CHECK_NO NOT IN (
SELECT PART_CHECK_NO
FROM WEEKLY_REPORT
WHERE WWR_DATE BETWEEN TRUNC(SYSDATE) - 4 AND TRUNC(SYSDATE));

-- 뷰 생성(버전2)
/*
CREATE OR REPLACE VIEW NOT_UNWRT
AS
SELECT PART_CHECK_NO
FROM PART_CHECK
WHERE PART_CHECK_NO
MINUS
SELECT PART_CHECK_NO
FROM WEEKLY_REPORT
WHERE WWR_DATE BETWEEN TRUNC(SYSDATE) - 4 AND TRUNC(SYSDATE);
*/

--조회
SELECT * FROM NOT_UNWRT;

-- ----------------------------------------------------------------------------- 프로시저구성
CREATE OR REPLACE PROCEDURE PRC_WEEKREPORT_UNWRT
IS
V_PART_CHECK_NO         WEEKREPORT_NTF.PART_CHECK_NO%TYPE;          -- 참여확인 번호 담을 변수
V_SEQ_WREPORT_UNWRT     WEEKREPORT_UNWRT.WEEKREPORT_UNWRT_NO%TYPE;  -- 생성된 시퀀스 담을 변수

-- 미작성자 조회 
CURSOR CURSOR_TEMP
IS
SELECT * FROM NOT_UNWRT;
    
BEGIN

    -- 주간업무보고 미작성 등록
    V_SEQ_WREPORT_UNWRT := SEQ_WREPORT_UNWRT.NEXTVAL;
    
    INSERT INTO WEEKREPORT_UNWRT(WEEKREPORT_UNWRT_NO, CREATE_DATE)
    VALUES(V_SEQ_WREPORT_UNWRT, SYSDATE);
    
    OPEN CURSOR_TEMP;
    
    LOOP
        FETCH CURSOR_TEMP INTO V_PART_CHECK_NO;
        
        EXIT WHEN CURSOR_TEMP%NOTFOUND;

        -- 주간업무보고 미작성 알림 등록        
        INSERT INTO WEEKREPORT_NTF(WEEKREPORT_NTF_NO, PART_CHECK_NO, WEEKREPORT_UNWRT_NO)
        VALUES(SEQ_WREPORT_NTF.NEXTVAL, V_PART_CHECK_NO, V_SEQ_WREPORT_UNWRT);
    
    END LOOP;
    
    CLOSE CURSOR_TEMP;

    COMMIT;
    
    --EXCEPTION
        --WHEN OTHERS THEN ROLLBACK;
END;


-- =============================================================================
--                          ○○ 자동화 업무 수행 ○○ 
-- =============================================================================
-- 자동화 업무 방법1, 2 모두 사용가능
-------------------------------------------------------------------------------- 방법1
-- 자동화 업무 방법1
-- ○ 스케줄러 잡 등록
BEGIN
    DBMS_SCHEDULER.CREATE_JOB
    ( JOB_NAME => 'JOB_PRC_WEEKREPORT_NTF'          -- 주간업무보고 미작성 잡
    , START_DATE => TRUNC(SYSDATE) + 13/24          -- 오늘(금요일) 오후 1시
    --, REPEAT_INTERVAL => 'FREQ=WEEKLY; INTERVAL=1;' -- 1주 간격으로 실행
    , REPEAT_INTERVAL => 'FREQ=WEEKLY; BYDAY=FRI;' -- 매주 금요일마다 실행
    , END_DATE => NULL
    , JOB_TYPE => 'PLSQL_BLOCK'
    , JOB_ACTION => 'BEGIN PRC_WEEKREPORT_UNWRT; END;'
    , COMMENTS => 'JOB 등록_주간보고미작성'
    );
    
    DBMS_SCHEDULER.ENABLE('JOB_PRC_WEEKREPORT_NTF');
END;
--==>>PL/SQL 프로시저가 성공적으로 완료되었습니다.

-- ▶▶▶ (필요시) 직접 실행시
EXEC PRC_WEEKREPORT_UNWRT;


-- =============================================================================
--                          ○○ 테스트 및 확인 ○○ 
-- =============================================================================
-- ○ 스케줄러 잡 등록 내역 확인
SELECT *
FROM USER_SCHEDULER_JOBS
WHERE JOB_NAME = 'JOB_PRC_WEEKREPORT_NTF';
 
-- ○ 지정한 시간에 스케줄러 잡이 정상적으로 실행되었는지 확인
SELECT *
FROM USER_SCHEDULER_JOB_LOG
WHERE JOB_NAME = 'JOB_PRC_WEEKREPORT_NTF';
/*
9265	24/01/12 13:00:00.029000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9266	24/01/19 13:00:00.023000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9267	24/01/26 13:00:00.048000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9269	24/02/02 13:00:00.038000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9271	24/02/09 13:04:04.021000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	FAILED								
9256	24/03/08 13:00:00.016000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9195	24/02/20 14:52:26.996000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9193	24/02/16 13:39:12.918000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	FAILED								
9194	24/02/09 13:00:00.027000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9196	24/02/20 15:57:39.787000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	FAILED								
9197	24/02/20 16:02:55.163000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	FAILED								
9205	    24/02/09 13:00:00.021000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9206    	24/02/16 13:00:00.012000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9217	24/02/23 13:00:00.034000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9240    	24/03/01 13:00:00.016000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		DEFAULT_JOB_CLASS	RUN	SUCCEEDED																																									
*/

SELECT *
FROM USER_SCHEDULER_JOB_RUN_DETAILS
WHERE JOB_NAME = 'JOB_PRC_WEEKREPORT_NTF';
--==>>
/*
9265	24/01/12 13:00:00.029000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/01/12 13:00:00.000000000 +09:00	24/01/12 13:00:00.014000000 +09:00	+00 00:00:00.000000	1	50,1371	17464	+00 00:00:00.010000					
9266	24/01/19 13:00:00.023000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/01/19 13:00:00.000000000 +09:00	24/01/19 13:00:00.023000000 +09:00	+00 00:00:00.000000	1	50,1375	9732	+00 00:00:00.000000					
9267	24/01/26 13:00:00.048000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/01/26 13:00:00.000000000 +09:00	24/01/26 13:00:00.032000000 +09:00	+00 00:00:00.000000	1	50,1385	27984	+00 00:00:00.000000					
9269	24/02/02 13:00:00.038000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/02/02 13:00:00.000000000 +09:00	24/02/02 13:00:00.022000000 +09:00	+00 00:00:00.000000	1	50,1391	27504	+00 00:00:00.000000					
9271	24/02/09 13:04:04.021000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		FAILED	6550	24/02/09 13:00:00.000000000 +09:00	24/02/09 13:04:04.010000000 +09:00	+00 00:00:00.000000	1	50,1401	14652	+00 00:00:00.000000					"ORA-06550: line 1, column 756:
PLS-00905: object SCOTT.PRC_WEEKREPORT_UNWRT is invalid
ORA-06550: line 1, column 756:
PL/SQL: Statement ignored
"
9256	24/03/08 13:00:00.016000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/03/08 13:00:00.000000000 +09:00	24/03/08 13:00:00.016000000 +09:00	+00 00:00:00.000000	1	1,21	24080	+00 00:00:00.000000					
9195	24/02/20 14:52:26.996000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/01/26 13:00:00.000000000 +09:00	24/02/20 14:52:26.981000000 +09:00	+00 00:00:00.000000	1	34,87	25536	+00 00:00:00.000000					
9193	24/02/16 13:39:12.918000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		FAILED	6550	24/02/16 13:00:00.000000000 +09:00	24/02/16 13:39:12.902000000 +09:00	+00 00:00:00.000000	1	66,3017	2500	+00 00:00:00.000000					"ORA-06550: line 1, column 756:
PLS-00201: identifier 'PRC_WEEKREPORT_UNWRT' must be declared
ORA-06550: line 1, column 756:
PL/SQL: Statement ignored
"
9194	24/02/09 13:00:00.027000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/02/09 13:00:00.000000000 +09:00	24/02/09 13:00:00.011000000 +09:00	+00 00:00:00.000000	1	66,3027	3588	+00 00:00:00.000000					
9196	24/02/20 15:57:39.787000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		FAILED	1861	24/01/26 13:00:00.000000000 +09:00	24/02/20 15:57:39.781000000 +09:00	+00 00:00:00.000000	1	66,3037	23276	+00 00:00:00.000000					"ORA-01861: literal does not match format string
ORA-06512: at line 1
"
9197	24/02/20 16:02:55.163000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		FAILED	1861	24/01/26 13:00:00.000000000 +09:00	24/02/20 16:02:55.148000000 +09:00	+00 00:00:00.000000	1	66,3043	21720	+00 00:00:00.000000					"ORA-01861: literal does not match format string
ORA-06512: at line 1
"
9205	24/02/09 13:00:00.021000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/02/09 13:00:00.000000000 +09:00	24/02/09 13:00:00.021000000 +09:00	+00 00:00:00.000000	1	66,3105	21608	+00 00:00:00.000000					
9206	24/02/16 13:00:00.012000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/02/16 13:00:00.000000000 +09:00	24/02/16 13:00:00.012000000 +09:00	+00 00:00:00.000000	1	66,3111	26600	+00 00:00:00.000000					
9217	24/02/23 13:00:00.034000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/02/23 13:00:00.000000000 +09:00	24/02/23 13:00:00.018000000 +09:00	+00 00:00:00.000000	1	66,3129	20624	+00 00:00:00.010000					
9240	24/03/01 13:00:00.016000000 +09:00	SCOTT	JOB_PRC_WEEKREPORT_NTF		SUCCEEDED	0	24/03/01 13:00:00.000000000 +09:00	24/03/01 13:00:00.011000000 +09:00	+00 00:00:00.000000	1	66,3187	22232	+00 00:00:00.000000					
*/

SELECT *
FROM WEEKREPORT_UNWRT;


-- ▶▶▶ (필요시)  잡, 프로시저 삭제 구문
--※ 잡 삭제 구문
EXEC DBMS_SCHEDULER.DROP_JOB('JOB_PRC_WEEKREPORT_NTF');
 
--※ 프로시저 삭제 구문
DROP PROCEDURE PRC_WEEKREPORT_UNWRT;


-------------------------------------------------------------------------------- 방법2
-- 자동화 업무 방법2 
--○ 프로그램 등록
BEGIN
    DBMS_SCHEDULER.CREATE_PROGRAM
    ( PROGRAM_NAME => 'TEST_PRG2'
    , PROGRAM_ACTION => 'PRC_WEEKREPORT_UNWRT'
    , PROGRAM_TYPE => 'STORED_PROCEDURE'
    , COMMENTS => 'JOB 등록_주간보고미작성'
    ,ENABLED => TRUE
    );
END;

-- ○ 스케줄러 등록
BEGIN
    DBMS_SCHEDULER.CREATE_SCHEDULE
    ( SCHEDULE_NAME => 'SCHEDULE_1_DAY2'
    , START_DATE => TRUNC(SYSDATE) + 13/24
    , END_DATE => NULL
    , REPEAT_INTERVAL => 'FREQ=WEEKLY; INTERVAL=1'
    , COMMENTS => 'Every 1 day'
    );
END;


-- ○ 잡 등록
BEGIN
    DBMS_SCHEDULER.CREATE_JOB   -- CREATE_JOB: 내부적으로 구성되어 있는 프로시저들
    ( JOB_NAME => 'TEST_JOB2'
    , PROGRAM_NAME => 'TEST_PRG2'
    , SCHEDULE_NAME => 'SCHEDULE_1_DAY2'
    , ENABLED => TRUE
    );
END;

SELECT *
FROM USER_SCHEDULER_JOBS
WHERE JOB_NAME = 'TEST_JOB2';
 
-- ○ 지정한 시간에 스케줄러 잡이 정상적으로 실행되었는지 확인
SELECT *
FROM USER_SCHEDULER_JOB_LOG
WHERE JOB_NAME = 'TEST_JOB2';
/*
9270	    24/02/02 13:00:00.038000000 +09:00	SCOTT	TEST_JOB2		DEFAULT_JOB_CLASS	RUN	FAILED								
9268	24/01/26 13:00:00.048000000 +09:00	SCOTT	TEST_JOB2		DEFAULT_JOB_CLASS	RUN	FAILED								
9274	24/02/02 13:01:26.234000000 +09:00	SCOTT	TEST_JOB2		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9273	24/01/19 13:00:00.016000000 +09:00	SCOTT	TEST_JOB2		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
9272	24/01/12 13:00:00.064000000 +09:00	SCOTT	TEST_JOB2		DEFAULT_JOB_CLASS	RUN	SUCCEEDED								
*/

SELECT *
FROM USER_SCHEDULER_JOB_RUN_DETAILS
WHERE JOB_NAME = 'TEST_JOB2';



SELECT * FROM PART_CHECK;
SELECT * FROM WEEKLY_REPORT;
SELECT * FROM WEEKREPORT_UNWRT;
SELECT * FROM WEEKREPORT_NTF;

-- ▶▶▶ (필요시)  잡, 프로시저 삭제 구문
-- ※ 삭제 처리 구문(프로그램 삭제)
EXECUTE DBMS_SCHEDULER.DROP_PROGRAM('TEST_PRG2',FALSE);

-- ※ 삭제 처리 구문(스케줄 삭제)
EXECUTE DBMS_SCHEDULER.DROP_SCHEDULER('SCHEDULE_1_DAY2',FALSE);

-- ※ 삭제 처리 구문(잡 삭제)
EXECUTE DBMS_SCHEDULER.ROP_JOB('TEST_JOB2',FALSE);

 
--※ 전체적으로 삭제 및 조회를 위해 작성 ---------------------------------------
DROP TABLE WEEKREPORT_UNWRT;
DROP TABLE WEEKREPORT_NTF;


DELETE FROM WEEKREPORT_UNWRT;
DELETE FROM WEEKREPORT_NTF;


SELECT * FROM PART_CHECK;
--==>>
/*
1	이주형	1
2	임하성	1
3	엄재용	1
4	박나영	1
5	문정환	1
6	오수경	1
*/
SELECT * FROM WEEKLY_REPORT;
--==>>
/*
1		이주형 주간업무보고	기획아이디어 리서치	24/01/08	1
2		임하성 주간업무보고	주제선정	24/01/08	2
3		엄재용 주간업무보고	주제선정	24/01/09	3
4		박나영 주간업무보고	주제선정	24/01/10	4
5		이주형 주간업무보고	기획아이디어 리서치	24/01/15	1
6		임하성 주간업무보고	주제선정	24/01/16	2
7		엄재용 주간업무보고	주제선정	24/01/17	3
8		박나영 주간업무보고	주제선정	24/01/18	4
*/
SELECT * FROM WEEKREPORT_UNWRT;
--==>>
/*
WEEKREPORT_UNWRT_NO	CREATE_DATE
1	                24/01/12
2	                24/01/19
*/
SELECT * FROM WEEKREPORT_NTF;
--==>>
/*
WEEKREPORT_NTF_NO	READ_DATE	PART_CHECK_NO	WEEKREPORT_UNWRT_NO
1		                        6	            1
2		                        5	            1
3		                        6	            2
4		                        5	            2
*/